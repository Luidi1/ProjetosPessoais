Testes:

USUÁRIOS:

ROTAS PÚBLICAS:

Rota: POST{{URLBase}}/usuarios/login (logarUsuario):
-Login com sucesso, ou seja, passando o email e senha corretos (feito)
-Token JWT válido e decodificável (feito)
-Campo “email” ausente, deve aparecer a mensagem dizendo isso (feito)
-Campo "email" no formato incorreto, deve aparecer a mensagem dizendo isso (feito)
-Email não cadastrado retorna 401 e mensagem adequada (feito)
-Campo "senha" ausente, deve aparecer a mensagem dizendo isso (feito)
-Senha inválida retorna 401 e mensagem adequada (feito)
obs: talvez fazer depois um formato correto de senha. (talvez a fazer)
-Campos "email" e "senha" ausentes, deve aparecer a mensagem dizendo isso (feito)

Rota: POST{{URLBase}}/usuarios/ (cadastrarUsuario):
-Cadastrar um úsuario com sucesso, passando todos os campos de usuário. (feito)
-Deve aparecer mensagem de erro se não informar o campo "nome". (feito)
-Deve aparecer mensagem de erro se não informar o campo "data_nascimento". (feito)
-Deve aparecer mensagem de erro se não informar o campo "endereco". (feito)
-Deve aparecer mensagem de erro se não informar o campo "email". (feito)
-Deve aparecer mensagem de erro se não informar o campo "senha". (feito)
-Deve aparecer mensagem de erro se não informar os campos "nome" e "data_nascimento". (feito)
-Deve aparecer mensagem de erro se não informar os campos "nome" e "endereco". (feito)
-Deve aparecer mensagem de erro se não informar os campos "nome" e "email". (feito)
-Deve aparecer mensagem de erro se não informar os campos "nome" e "senha". (feito)
-Deve aparecer mensagem de erro se não informar os campos "nome", "data_nascimento", "endereco", "email" e "senha". (feito)


ROTAS AUTENTICADAS:

Rota: GET{{URLBase}}/usuarios/busca? (listarUsuariosPorFiltro):
-Listar todos usuários se não for passado nenhum parâmetro de busca (feito)
-Listar todos usuários que começam com determinada sequência de letras passada pelo parâmetro de busca "nome"(feito)
-Listar usuário ou usuários com nome específico passado pelo parâmetro de busca "nome" (feito)
-Se passar um parâmetro de busca inexistente, deve aparecer uma mensagem dizendo que esse parâmetro não existe e listar
os parâmetros válidos (feito)
-Se passar o parâmetro "minData_nascimento" com a data no formato incorreto deve aparecer uma mensagem dizendo que está
no formato incorreto e mostrar qual é o formato correto (feito)
-Listar todos usuários a parir de uma data mínima passada pelo parêmtro de busca "minData_nascimento" (feito)
-Listar todos usuários a parir de uma data máxma passada pelo parêmtro de busca "maxData_nascimento" (feito)
-Listar todos usuários entre uma data mínima passada pelo parêmtro de busca "minData_nascimento" e uma data 
máxima passada pelo parâmetro de busca "maxData_nascimento"(feito)
-Listar todos usuários entre uma data mínima passada pelo parêmtro de busca "minData_nascimento" e uma data 
máxima passada pelo parêmtro de busca "maxData_nascimento" e que começam com determinada sequência de letras passada
pelo parâmetro de busca "nome"(feito)
-Listar todos os usuário com determinado tipo de perfil passado pelo parâmetro de busca "perfil" (feito)
-Se passar um valor incorreto para o parâmetro "perfil", deve aparecer uma mensagem dizendo que esse tipo de perfil
não existe e listar os valores válidos. (feito)
-Listar todos usuários entre uma data mínima passada pelo parâmetro de busca "minData_nascimento" e uma data 
máxima passada pelo parêmtro de busca "maxData_nascimento", que começam com determinada sequência de letras passada
pelo parâmetro de busca "nome" e que tenham determinado tipo de perfil passado pelo parâmetro de busca "perfil" (feito)
-Listar todos usuários que começam com determinada sequência de letras passada pelo parâmetro de busca "email" (feito)
-Se não encontrar nenhum email, deve aparecer uma mensagem dizendo isso. (feito)
obs: Nós não verificamos se o email está no formato correto, pois isso já é verificado na hora de cadastrar, mas poderíamos
verificar com fim de informar que o email que tu está procurando está no formato errado. Isso não poderia reusar nosso
arquivo que faz a validação do email, por causa que ele verifica só quando o email está completo, mas nossa busca pelo
filtro "email" é feita de modo a listar os emails sem precisar escrever o email completo, de modo a facilitar ver emails
parecidos. (talvez a fazer)

Rota: GET{{URLBase}}/usuarios/id (listarUsuariosPorId):
-Listar qualquer usuário pelo administrador (feito)
-Listar o usuário pelo dono do mesmo (feito)
-Não listar usuário por meio de um usuário que não seja administrador (feito)
-Passando um id no formato errado, o erro é da classe ErroRequisicao (feito)
-Passando um id inexistente, no formato correto, o erro é da classe NaoEncontrado (feito)

Rota: GET{{URLBase}}/usuarios (listarUsuarios):
-Listar os usuários (feito)
-Validar email (feito)
-Mandar uma mensagem para o email, para verificar que existe o email.(a fazer)
-Validar senha (a fazer)
obs:Quando coloca alguma coisa depois da rota como: "/aaa", aparece "Recurso não encontrado". Não seria melhor colocar 
"Rota não encontrada"?(talvez a fazer)

Rota: PUT{{URLBase}}/usuarios/id (atualizarUsuario):
-Atualizar todos os campos de qualquer usuário sendo administrador (feito)
-Atualizar todos os campos do usuário sendo o dono (feito)
-Negar a permissão de atualizar um usuário que não seja o dono ou administrador (feito)
-Aparecer mensagem de erro caso passe o ID no formato inválido (feito)
-Aparecer mensagem de erro caso passe o ID não cadastrado no sistema (feito)
-Aparecer mensagem de erro caso tente atualizar campo inexistente (feito)
-Atualizar um campo e verificar se os demais permanecem iguais, fazer isso com cada campo (feito)

Rota: DELETE{{URLBase}}/usuarios/id (deletarUsuario):
-Deletar qualquer usuário sendo administrador (feito)
-Deletar o usuário sendo o dono (feito)
-Negar a permissão de deletar um usuário que não seja o dono ou administrador (feito)
-Aparecer mensagem de erro caso passe o ID no formato inválido (feito)
-Aparecer mensagem de erro caso passe o ID não cadastrado no sistema (feito)
-Aparecer mensagem de erro caso o token seja inválido (feito)
-Aparecer mensagem de erro caso o token seja inexistente (feito)

Rota: DELETE{{URLBase}}/usuarios/id (deletarTodosUsuarios):
-Deletar todos usuários sendo administrador (feito)
-Negar a permissão de deletar um usuário que não seja o dono ou administrador (feito)
-Deletar todos usuários exceto os Ids informados (feito)

